name: CI

on:

  push:
    branches: 
      - main

  workflow_dispatch:

jobs:

  deploy-api:
  
    runs-on: ubuntu-22.04
    name: Deploy API to Kong Control Plane
    needs: deploy-service

    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Install decK tool
      run: |
        curl -sL https://github.com/kong/deck/releases/download/v1.19.1/deck_1.19.1_linux_amd64.tar.gz -o deck.tar.gz
        tar -xf deck.tar.gz -C /tmp
        sudo cp /tmp/deck /usr/local/bin/
      
    - name: Install Inso CLI tool
      run: |
        curl -sL https://github.com/Kong/insomnia/releases/download/lib%403.16.0/inso-linux-3.16.0.tar.xz -o inso.tar.xz
        tar -xf inso.tar.xz -C /tmp
        sudo cp /tmp/inso /usr/local/bin/   

    - name: Export OpenAPI Spec
      run: inso export spec $(yq '.name' $(echo -n ./.insomnia/Workspace/*)) > ./api/oas.yaml

    - name: Lint OpenAPI Spec
      run: inso lint spec ./api/oas.yaml
      
    - name: Generate Kong declarative configuration from Spec
      run: inso generate config ./api/oas.yaml --type declarative --tags _KonnectService:${{ vars.KONG_SERVICE_NAME }} -o kong_raw.yaml
      
    - name: Upgrade Version of Kong declarative configuration
      run: deck convert --input-file kong_raw.yaml --from kong-gateway-2.x --to kong-gateway-3.x --output-file kong.yaml
      
    - name: 'Upload Kong Config Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ vars.KONG_SERVICE_NAME }}-api-kong-config
        path: kong.yaml
        
    - name: Validate Kong declarative configuration
      run: deck validate --state kong.yaml,./api/plugins
      
    - name: Diff declarative config
      run: deck diff --state kong.yaml,./api/plugins --konnect-addr ${{ secrets.KONNECT_ADDR }} --konnect-token ${{ secrets.KONNECT_TOKEN }} --konnect-runtime-group-name ${{ secrets.KONNECT_RUNTIME_GROUP_NAME }} --select-tag _KonnectService:${{ vars.KONG_SERVICE_NAME }}
      
    - name: Backup Existing Kong Configuration
      run: deck dump --konnect-addr ${{ secrets.KONNECT_ADDR }} --konnect-token ${{ secrets.KONNECT_TOKEN }} --konnect-runtime-group-name ${{ secrets.KONNECT_RUNTIME_GROUP_NAME }} -o kong-backup.yaml
      
    - name: 'Upload Kong Config Backup Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: kong-backup
        path: kong-backup.yaml

    - name: Create Service Hub Service Product
      id: create-service-hub-product
      run: |
        echo "SERVICE_ID=$(curl ${{ secrets.KONNECT_ADDR }}/konnect-api/api/service_packages -H 'Authorization:Bearer ${{ secrets.KONNECT_TOKEN }}' -H 'Content-Type:application/json' -d "{\"name\":\"${{ vars.KONG_SERVICE_NAME }}\",\"display_name\":\"${{ vars.KONG_SERVICE_DISPLAY_NAME }}\",\"description\":\"${{ vars.KONG_SERVICE_DESCRIPTION }}\"}" | jq -r .id )" >> "$GITHUB_OUTPUT"

    - name: Prepare Static Documentation
      id: prepare-static-docs
      run: |        
        mkdir docs
        for entry in "./api/portal_assets"/*
        do
        echo "{\"slug\":\"$(echo "$entry" | sed 's#.*/\([^/]*\)\.md#\1#')\",\"status\":\"published\",\"title\":\"$(echo "$entry" | sed 's#.*/\([^/]*\)\.md#\1#')\",\"raw_content\":\"$(base64 -i ./api/portal_assets/${entry##*/})\",\"filename\":\"$(echo "$entry" | sed 's#.*/\([^/]*\)\.md#\1#')\"}" >> ./docs/$(echo "$entry" | sed 's#.*/\([^/]*\)\.md#\1#').json
        done

    - name: Upload Static Documentation
      id: upload-static-docs
      run: |
        for entry in "./docs"/*
        do
        curl -X POST ${{ secrets.KONNECT_ADDR }}/v0/services/${{ steps.create-service-hub-product.outputs.SERVICE_ID }}/documents -H "Authorization: ${{ secrets.KONNECT_TOKEN }}" -H 'Content-Type: application/json' -d @$entry
        done
        
    - name: Deploy declarative config to development environment
      id: deploy-declarative-config
      run: |
        deck sync --state kong.yaml,./api/plugins --konnect-addr ${{ secrets.KONNECT_ADDR }} --konnect-token ${{ secrets.KONNECT_TOKEN }} --konnect-runtime-group-name ${{ secrets.KONNECT_RUNTIME_GROUP_NAME }} --select-tag _KonnectService:${{ vars.KONG_SERVICE_NAME }}
        sleep 10
        echo "SERVICE_VERSION_ID=$(curl ${{ secrets.KONNECT_ADDR }}/konnect-api/api/service_packages/${{ steps.create-service-hub-product.outputs.SERVICE_ID }} -H "Authorization:Bearer ${{ secrets.KONNECT_TOKEN }}" | jq -r '.versions | .[] | .id')" >> "$GITHUB_OUTPUT"

    - name: Prepare OpenAPI Specification 
      id: prepare-oas
      run: |
        yq -i '.servers[0].url = "${{ vars.KONG_GATEWAY }}"' ./api/oas.yaml
        cat ./api/oas.yaml | jq -sR . >> service_data.json
        echo -n '{"published":"true","path":"./api/oas.yaml","content":' | cat - service_data.json > temp && mv temp service_data.json
        echo -n '}' >> service_data.json

    - name: Upload OpenAPI Specification to Service Version
      id: upload-oas
      run: |
        curl -X POST ${{ secrets.KONNECT_ADDR }}/konnect-api/api/service_versions/${{ steps.deploy-declarative-config.outputs.SERVICE_VERSION_ID }}/documents -H "Authorization:Bearer ${{ secrets.KONNECT_TOKEN }}" -H 'Content-Type:application/json' -d @service_data.json

    - name: Run Tests
      id: run-tests
      run: |
        inso run test $(yq '.name' $(echo -n ./.insomnia/Workspace/*))

    - name: Publish to Developer Portal
      run: |
        echo "Publish service id ${{ steps.create-service-hub-product.outputs.SERVICE_ID }} to portal"
        curl -X PUT ${{ secrets.KONNECT_ADDR }}/konnect-api/api/service_packages/${{ steps.create-service-hub-product.outputs.SERVICE_ID }}/portals/${{ secrets.PORTAL_ID }} -H "Authorization:Bearer ${{ secrets.KONNECT_TOKEN }}"

    - name: Turn on App Registration
      run: |
        curl -X PUT ${{ secrets.KONNECT_ADDR }}/konnect-api/api/application_registrations/service_versions/${{ steps.deploy-declarative-config.outputs.SERVICE_VERSION_ID }} -H "Authorization:Bearer ${{ secrets.KONNECT_TOKEN }}"
